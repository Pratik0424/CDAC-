/*1. Implement a Stack using an array.
•	Test Case 1:
Input: Push 5, 3, 7, Pop
Output: Stack = [5, 3], Popped element = 7
 	time complexity : O(1)
 	space complexity : O(n)
*/
public class Stack {
	int [] stack;
	int top;
	
	public Stack(int size) {
		stack = new int[size];
		top = -1;
		
	}
	public void push(int value) {
		if(top < stack.length - 1) {
			stack[++top] = value;
			
		} else {
			System.out.println("Stack is full");
		}
	}
	
	public int pop() {
		if(top >= 0) {
			return stack[top--];
		} else {
			System.out.println("Stack is empty");
			return -1;
		}
	}
	
	public void display() {
		if(top >= 0) {
			for(int i=0; i<= top; i++) {
				System.out.print(stack[i]+", ");
			}
			System.out.println();
		
		} else {
			System.out.println("Stack is empty");
		}
	}
	
	public static void main(String[] args) {
		Stack stack = new Stack(10);
		
		stack.push(5);
		stack.push(3);
		stack.push(7);
		stack.display();
		
		int pop = stack.pop();
		System.out.println("Popped element : "+pop);
		
		
	}
}


/*2. Check for balanced parentheses using a stack.
•	Test Case 1:
Input: "({[()]})"
Output: Balanced
•	Test Case 2:
Input: "([)]"
Output: Not Balanced
 	time complexity : O(1)
 	space complexity : O(n)
*/
public class BracketParentheses {
	public static void main(String[] args) {
		System.out.print("Enter : ");
		Scanner sc = new Scanner(System.in);
		String n =sc.nextLine();
		
		if(isBalanced(n)) {
			   System.out.println("Balanced");
			} else {
				System.out.println("Not Balanced");
		}
	}
	public static boolean isBalanced(String s) {
		char[] stack = new char[s.length()];
		
		int top = -1;
		
		for(char c : s.toCharArray()) {
			if( c == '(' || c == '{' || c == '[' ) {
				stack[++top] = c;
			}
			else if(c == ')' || c == '}' || c == ']') {
				if(top == -1) break;
				char open = stack[top--];
				
				if( c == ')' && open != '(' || 
					c == '}' && open != '{' || 
					c == ']' && open != '[' ) {
					return false;
				}
			}
		}
		return top == -1;
	}
}
